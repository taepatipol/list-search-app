{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Option","Select","App","props","stringToList","str","list","split","listTrimmed","forEach","item","push","parseInt","trim","linearSearch","keyStr","i","key","results","length","n","setState","binarySearch","round","sortedList","sort","a","b","finished","start","end","mid","Math","floor","newEnd","slice","newStart","bubbleSort","len","listAfter","listBefore","j","tmp","handleSelectChange","value","searchType","handleInputChange","e","target","name","handleSubmit","preventDefault","state","listInput","keyInput","alert","renderResults","resultStr","index","className","style","marginTop","onSubmit","this","onChange","placeholder","type","htmlType","defaultValue","width","map","React","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.908944e6.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { Select, Input, Button } from 'antd';\n\nconst { Option } = Select;\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      listInput: '',\n      keyInput: '',\n      searchType: 'linear',\n      results: []\n    }\n  }\n\n  // search functions\n  stringToList = (str) => {\n    if (str === '') return [];\n    let list = str.split(',');\n    let listTrimmed = [];\n    list.forEach(item => {\n        listTrimmed.push(parseInt(item.trim()));\n    });\n\n    return listTrimmed;\n  }\n\n  linearSearch = (list, keyStr) => {\n    let i = 0;\n    let key = parseInt(keyStr);\n    let results = []\n\n    results.push(`List: ${list}`);\n    results.push(`Search: ${key}`);\n    results.push(`Results::`);\n\n    for(i = 0; i < list.length; i++) {\n      let n = list[i];\n      \n      if (n === key) {\n        results.push(`Round ${i+1} ===> ${key} = ${n} found!!`);\n        break;\n      } else {\n        results.push(`Round ${i+1} ===> ${key} != ${n}`);\n      }\n    }\n\n    this.setState({\n      results: results\n    });\n  }\n\n  binarySearch = (list, keyStr) => {\n\n    let results = [];\n    let round = 0;\n    let key = parseInt(keyStr);\n\n    results.push(`List: ${list}`);\n    results.push(`Search: ${key}`);\n    results.push(`Results::`);\n\n    let sortedList = [...list].sort((a,b)=>a-b);\n    results.push(`List Sorted: ${list} => ${sortedList}`);\n\n    let finished = false;\n    let start = 0;\n    let end = sortedList.length - 1;\n\n    while (!finished) {\n      round++;\n      let mid = Math.floor((start+end)/2);\n      if (sortedList[mid] === key) {\n        results.push(`Round ${round}: the middle number is ${sortedList[mid]} = ${key} found!!`);\n        finished = true;\n        break;\n      } else if (sortedList[mid] > key) {\n        results.push(`Round ${round}: the middle number is ${sortedList[mid]} > ${key}`);\n        let newEnd = mid - 1;\n        results.push(`Shorten search range: ${sortedList.slice(start,end+1)} => ${sortedList.slice(start,newEnd+1)}`);\n        end = newEnd;\n      } else if (sortedList[mid] < key) {\n        results.push(`Round ${round}: the middle number is ${sortedList[mid]} < ${key}`);\n        let newStart = mid + 1;\n        results.push(`Shorten search range: ${sortedList.slice(start,end+1)} => ${sortedList.slice(newStart,end+1)}`);\n        start = newStart;\n      }\n      if (round === 50) {\n        finished = true;\n        results.push('loop exceed limit of 50');\n        break;\n      }\n    }\n\n    this.setState({\n      results: results\n    });\n  }\n\n  bubbleSort = (list) => {\n    let len = list.length;\n    let results = [];\n    let listAfter = [...list];\n    let listBefore = [...list];\n    let round = 1;\n\n    results.push(`List: ${list}`);\n    results.push(`Results::`)\n\n    for (let i = 0; i < len; i++) {\n        for (let j = 0; j < len; j++) {\n            if (listAfter[j] > listAfter[j + 1]) {\n                let tmp = listAfter[j];\n                listAfter[j] = listAfter[j + 1];\n                listAfter[j + 1] = tmp;\n\n                results.push(`Round ${round++} swap the positions ${j}<->${j+1}: ${listBefore} => ${listAfter}`);\n                listBefore = listAfter;\n                listAfter = [...listBefore];\n            }\n        }\n    }\n    \n    this.setState({\n      results: results\n    });\n  }\n\n  // handle functions\n  handleSelectChange = (value) => {\n    this.setState({\n      searchType: value\n    });\n  }\n\n  handleInputChange = (e) => {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n\n    let list = this.stringToList(this.state.listInput);\n\n    if (this.state.listInput === '') {\n      alert('Please fill list and keyword.');\n    }\n    else if (this.state.keyInput === '' && this.state.searchType !== 'bubble') {\n      alert('Please fill list and keyword.');\n    }\n    else if (this.state.searchType === 'linear') {\n      this.linearSearch(list,this.state.keyInput);\n    } \n    else if (this.state.searchType === 'binary') {\n      this.binarySearch(list,this.state.keyInput);\n    } \n    else if (this.state.searchType === 'bubble') {\n      this.bubbleSort(list);\n    }\n  }\n\n\n  // render utilities functions\n  renderResults = (resultStr, index) => {\n    return (\n      <p key={index}>{resultStr}</p>\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-box\">\n          <h1 style={{ marginTop: '50px'}}>List Search App</h1>\n          <form onSubmit={this.handleSubmit}>\n            <span className=\"row\">\n              <p>List:</p>\n              <Input name=\"listInput\" value={this.state.listInput} onChange={this.handleInputChange} placeholder=\"ex. 1,2,8\"/>\n            </span>\n            <span className=\"row\">\n              <p>ค้นหา:</p>\n              <Input name=\"keyInput\" value={this.state.keyInput} onChange={this.handleInputChange} placeholder=\"ex. 2\"/>\n              <Button type=\"primary\" htmlType=\"submit\">ค้นหา</Button>\n            </span>\n            <span>\n              <p>ประเภทการค้นหา</p>\n            </span>\n            <span className=\"row\">\n              <Select defaultValue=\"linear\" style={{ width: 240 }} onChange={this.handleSelectChange}>\n                <Option value=\"linear\">Linear Search</Option>\n                <Option value=\"binary\">Binary Search</Option>\n                <Option value=\"bubble\">Bubble Sort</Option>\n              </Select>\n            </span>\n          </form>\n          <p>ผลลัพธ์</p>\n          <div className=\"resultsBox\">\n            {this.state.results.map(this.renderResults)}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}